#!/usr/bin/env python

# Reads an OONI http_requests report and shows URLs that have known block pages.
#
# First, make an OONI report:
#   ooniprobe -i /usr/share/ooni/decks/complete_no_root.deck
# Then,
#   ./findblocks report-http_requests-XXXX.yamloo

# Should look for timeout blocks.
# http://www.freedomhouse.org: control_failure=task_timed_out

import csv
import datetime
import errno
import getopt
import os
import os.path
import sys
import urllib
import urlparse

from classify import classify_response
from ooni import ooni_open_file

class options(object):
    save_blocks_dir = None

def usage(f=sys.stdout):
    f.write("""\
Usage: %s *-http_requests-v1-probe.yaml.gz

  --save-blocks=DIR  save block pages to directory DIR.
  -h, --help         show this help.
""" % sys.argv[0])

# Return a (nontor, tor) pair if there are exactly two requests and one is
# nontor and one is tor, or else raise an exception.
def split_requests(requests):
    nontor = None
    tor = None
    for request in requests:
        if request.get("failure") is not None:
            continue
        if not request["request"]["tor"]["is_tor"]:
            # It's possible for there to be more than one request of each type
            # (even with different User-Agents). I suppose it is a bug in
            # earlier ooniprobe that would reschedule both the Tor and non-Tor
            # retrieval if either of them failed. The first instance of this is
            # on 2013-05-02. It may be related to:
            # https://gitweb.torproject.org/ooni-probe.git/commit/?id=0bbd9a1e0c2f3f04120264fddabc3020692e4c01
            # https://gitweb.torproject.org/ooni-probe.git/commit/?id=3d2b9025ca372ca0fcdb88ce6e2cb050c1cf6e64
            if nontor is None:
                nontor = request
        else:
            if tor is None:
                tor = request
    return nontor, tor

def save_response(f, response):
    f.write("HTTP/1.0 %d xxx\r\n" % response["code"])
    for name, values in response["headers"]:
        for value in values:
            f.write("%s: %s\r\n" % (name, value))
    f.write("\r\n")
    f.write(response["body"])

def save_response_filename(filename, response):
    try:
        os.makedirs(os.path.dirname(filename))
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise
    with open(filename, "w") as f:
        return save_response(f, response)

# Save a response with an automatically generated filename.
def save_response_filename_auto(header, request, response, class_):
    url = urlparse.urlsplit(request["url"])
    filename = "%s-%s-%s%s" % (header["report_id"], url.scheme, url.netloc, urlparse.urlunsplit((None, None, url.path, url.query, None)))
    filename = urllib.quote(filename, safe="")
    # Truncate name to filesystem limits.
    filename = filename[:255]
    filename = os.path.join(options.save_blocks_dir, class_, filename)
    return save_response_filename(filename, response)

# Canonicalize domain capitalization and paths of "/" and "", which otherwise
# cause spurious URL differences.
def canonicalize_url(url):
    u = urlparse.urlsplit(url)
    u = urlparse.urlsplit(urlparse.urlunsplit((u.scheme, u.netloc.lower(), u.path, u.query, u.fragment)))
    if u.path == "/":
        u = urlparse.urlsplit(urlparse.urlunsplit((u.scheme, u.netloc, "", u.query, u.fragment)))
    return urlparse.urlunsplit(u)

def boolf(v):
    if v is None:
        return None
    elif v:
        return "T"
    else:
        return "F"

def process_file(yamloo, filename):
    header = None
    for doc in yamloo:
        if doc["record_type"] == "header":
            assert header is None
            header = doc
            continue

        if doc["record_type"] != "entry":
            continue

        assert header is not None

        if options.save_blocks_dir is not None:
            for request in doc["requests"]:
                try:
                    isblocked, class_ = classify_response(request["response"])
                except KeyError, e:
                    # No response.
                    continue
                if isblocked:
                    save_response_filename_auto(header, request["request"], request["response"], class_)

        url = None
        nontor_isblocked = None
        nontor_status = None
        nontor_class = None
        tor_isblocked = None
        tor_status = None
        tor_class = None
        tor_exit_ip = None
        tor_exit_nickname = None

        nontor, tor = split_requests(doc["requests"])
        if nontor is not None:
            if url is None:
                url = nontor["request"]["url"]
            nontor_isblocked, nontor_class = classify_response(nontor["response"])
            nontor_status = nontor["response"]["code"]

        if tor is not None:
            if url is None:
                url = tor["request"]["url"]
            tor_isblocked, tor_class = classify_response(tor["response"])
            tor_status = tor["response"]["code"]
            # Sometimes exit_ip and exit_name are missing.
            tor_exit_ip = tor["request"]["tor"].get("exit_ip")
            tor_exit_nickname = tor["request"]["tor"].get("exit_name")

        if url is None and isinstance(doc["input"], basestring):
            url = doc["input"]
        if url is not None:
            url = canonicalize_url(url)

        try:
            test_date = datetime.datetime.utcfromtimestamp(doc["test_start_time"])
        except KeyError:
            # Some reports don't have individual test_start_time.
            test_date = datetime.datetime.utcfromtimestamp(header["start_time"])
        csvw.writerow({
            "date": test_date.strftime("%Y-%m-%d %H:%M:%S"),
            "report_id": header["report_id"],
            "probe_cc": header["probe_cc"],
            "url": url,
            "nontor_isblocked": boolf(nontor_isblocked),
            "nontor_status": nontor_status,
            "nontor_class": nontor_class,
            "tor_isblocked": boolf(tor_isblocked),
            "tor_status": tor_status,
            "tor_class": tor_class,
            "tor_exit_ip": tor_exit_ip,
            "tor_exit_nickname": tor_exit_nickname,
        })
        sys.stdout.flush()

if __name__ == "__main__":
    opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["save-blocks=", "help"])
    for o, a in opts:
        if o == "--save-blocks":
            options.save_blocks_dir = a
        elif o == "-h" or o == "--help":
            usage()
            sys.exit()

    csvw = csv.DictWriter(sys.stdout, fieldnames=["date", "report_id", "probe_cc", "nontor_isblocked", "nontor_status", "nontor_class", "tor_isblocked", "tor_status", "tor_class", "tor_exit_ip", "tor_exit_nickname", "url"], lineterminator="\n")
    csvw.writeheader()

    for filename in args:
        yamloo = ooni_open_file(filename)
        process_file(yamloo, filename)
